# what is listening on a given port
function which_port() {
  lsof -n -i4TCP:$1 | grep LISTEN
}

function log_section() {
  echo "$(tput setaf 0)$(tput setab 7)$(tput bold) $1 $(tput sgr 0)"
}

function log_step() {
  echo "$(tput setaf 6)- $1$(tput sgr 0)"
}

function list_raspberry_pi_ips() {
  echo "IPs of network-connected raspberry pi computers:"
  sudo nmap -sP 10.0.1.0/24 | awk '/^Nmap/{ip=$NF}/B8:27:EB/{print ip}'
  # arp -na | grep -i b8:27:eb
}

# Pause execution until guest control is available for a virtual machine.
function wait_for_guestcontrol() {
  sleep_wait="5"
  while true ; do
    echo "Waiting for ${1} to be available for guestcontrol..."
    sleep "${sleep_wait}"
    VBoxManage showvminfo "${1}" | grep 'Additions run level:' | grep -q "3" && return 0 || true
  done
}

# go to rbenv directory of gems installed for local Ruby version
function go_to_gem_dir() {
  RUBYVER="$(ruby -e 'print RUBY_VERSION')"
  cd ~/.rbenv/versions/$RUBYVER/lib/ruby/gems/$RUBYVER/gems/
}

# delete all the rbenv-installed gems for cwd
function remove_rbenv_gems() {
  gem list | cut -d" " -f1 | xargs gem uninstall -aIx
}

# look up an IP address
function lookup_ip() {
  curl ipinfo.io/$1
}

# get gzipped size of a local file
function gz() {
  local original="$(cat "$1" | wc -c)"
  local gzipped="$(gzip -c "$1" | wc -c)"
  echo
  echo "original file size (bytes):" $original
  echo "gzipped file size  (bytes):" $gzipped
}

# get gzipped size of a remote file
function gzu() {
  local dlFile="$(curl $1)"
  local origSize="$(echo $dlFile | wc -c)"
  local gzipSize=$(echo $dlFile | gzip -c | wc -c)
  local original="$(echo "scale=1; $origSize/1024" | bc)"
  local gzipped="$(echo "scale=1; $gzipSize/1024" | bc)"
  echo
  echo "original file size (kb):" $original
  echo "gzipped file size  (kb):" $gzipped
}

# list files in dir greater than a certain size
function lsgt() {
  find . -size +$1 -exec du -h {} \;
}

# start an HTTP server from a directory, optionally specifying the port
# requires node & https://github.com/nodeapps/http-server to be installed
function server() {
  local port="${1:-8000}"
  http-server -p $1 -o
}

# start an HTTP server from a directory, optionally specifying the port
# requires python to be installed
function srvr() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesn't break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Create a new directory and enter it
function md() {
  mkdir -p "$@" && cd "$@"
}

# navigate and dir
function cdd() {
  if [ "$*" = "" ]
    then
      cd
  else
    cd "$*";
  fi
  dir;
}

# find shorthand
function f() {
  find . -name "$1"
}

# quicklook from the terminal
function qlf() {
  qlmanage -p "$*" >& /dev/null;
}

# watch for a website to come back online
# example: github down? do `mashf5 github.com`
function mashf5() {
  watch -d -n 5 "curl --head --silent --location $1 | grep '^HTTP/'"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function http_compression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
  printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
  echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
  perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
  echo # newline
}

# recursive list of files by extension (ignores node_modules directory)
function list_files_by_extension() {
  find . -type d -name node_modules -prune -o -name "*.$1" -print
}

function count_files_by_extension() {
  echo "Number of files with .$1 extension:"
  list_files_by_extension $1 | wc -l
}

function yarn_add_and_commit() {
  yarn add $1 && git add . && git commit -m "build(deps): install $1 package"
}

function yarn_add_development_and_commit() {
  yarn add -D $1 && git add . && git commit -m "build(deps-dev): install $1 package"
}

function yarn_remove_and_commit() {
  yarn remove $1 && git add . && git commit -m "build(deps): uninstall $1 package"
}

function yarn_remove_development_and_commit() {
  yarn remove $1 && git add . && git commit -m "build(deps-dev): uninstall $1 package"
}

# retroactive git tagging
# https://github.com/openmelody/melody/wiki/Devbest-tagging
# git checkout SHA_HASH
# GIT_COMMITTER_DATE="$(git show --format=%aD  | head -1)" git tag -a v1.0.0 -m"v1.0.0"


# generates a git patch for a specific commit; sha is only arg
function git_patch() {
  git format-patch -1 "$1" --stdout > ~/new_patch.patch
}

# batch git rm (opposite of git add .)
function git_rm() {
  git rm $(git ls-files --deleted)
}

# use git to recursively rename file extensions
function git_rename_file_extensions() {
  for file in $(list_files_by_extension "*$1"); do
    git mv "$file" "${file%$1}$2"
  done
}

# git log with per-commit cmd-clickable GitHub URLs (iTerm)
function git_log_clickable() {
  local remote="$(git remote -v | awk '/^origin.*\(push\)$/ {print $2}')"
  [[ "$remote" ]] || return
  local user_repo="$(echo "$remote" | perl -pe 's/.*://;s/\.git$//')"
  git log $* --name-status --color | awk "$(cat <<AWK
    /^.*commit [0-9a-f]{40}/ {sha=substr(\$2,1,7)}
    /^[MA]\t/ {printf "%s\thttps://github.com/$user_repo/blob/%s/%s\n", \$1, sha, \$2; next}
    /.*/ {print \$0}
AWK
  )" | less -F
}

# take this repo and copy it to somewhere else minus the .git stuff.
function git_export() {
  mkdir -p "$1"
  git archive master | tar -x -C "$1"
}

# displays repo contributors and their total contributions
function git_top_authors() {
  git shortlog -s -- $1 | cut -c8- | while read i
  do
      git log --author="$i" --pretty=tformat: --numstat -- $1 \
      | awk -v name="$i" '{ add += $1; subs += $2; loc += $1 - $2 } END { printf "%s: added lines: %s removed lines: %s total lines: %s\n", name, add, subs, loc }'
  done
}

# run all repo commits through commitlint
function commitlint_all_commits() {
  npx commitlint --from `git_first_commit` --to head --verbose
}

# returns first commit of a repo (depending on past merges may return multiple SHAs)
function git_first_commit() {
  git rev-list --max-parents=0 HEAD
}

#
function git_commits_since_last_tag() {
  git log `git describe --tags --abbrev=0`..HEAD --oneline
}

# returns the name of your current branch
function current_branch() {
  git branch | grep '*' | cut -f2 -d' '
}

function branches_first_commit() {
  git merge-base master $1
}

# list of commits that exist on current branch but not on remote #main
function git_here_not_there() {
  if [ `git branch --list master` ]
  then
    git log HEAD \^origin/master --no-merges --oneline
  else
    git log HEAD \^origin/main --no-merges --oneline
  fi
}

# do an interactive rebase <N> commits back on HEAD
function git_rebase_interactive_distance() {
  git rebase -i HEAD~"$1"
}

# rebase main remote branch onto current branch
function git_bring_up_to_date() {
  if [ `git branch --list master` ]
  then
    git pull origin master --rebase
  else
    git pull origin main --rebase
  fi
}

# list of files changed on current branch
function git_branch_ls() {
  BRANCH="${1:-`current_branch`}"
  git log "$(branches_first_commit $BRANCH)"..HEAD --name-only --pretty=format: | sort | uniq
}

# display local branches that do not have a remote
function git_branch_no_remote() {
  git branch --format "%(refname:short) %(upstream)" | awk '{if (!$2) print $1;}'
}

# display list of remote git branches ordered by most recently updated
# can pass argument to limit count
function git_branch_remote_ls() {
  for branch in `git branch -r | grep -v HEAD`;
  do echo -e `git show --date=short --pretty=format:"%Cblue%cd | %Cred%cr | %Creset%an | %Cgreen$k" $branch | head -n 1` \\t$branch;
  done | sort -r | head -n 50 | column -t -s '|' | \
  if [ -n "$1" ]
    then
      head -n $1
  else
    head -n 500
  fi
}

# display list of local git branches ordered by most recently updated
# can pass argument to limit count
function git_branch_local_ls() {
  git for-each-ref \
  --format='%(color:blue)%(committerdate:short)%(color:reset) | %(color:red)%(committerdate:relative)%(color:reset) | %(authorname) | %(color:yellow)%(refname:short)%(color:reset)' \
  --sort=-committerdate refs/heads/ | column -t -s '|' | \
  if [ -n "$1" ]
    then
      head -n $1
  else
    head -n 500
  fi
}

# write this less shittily someday
function git_contribute() {
  case "$1" in

  1)  echo "All your contributions to this repo..."
      git log --stat --author $(git config --get user.email) | awk -F',' '/files? changed/ {
          files += $1
          insertions += $2
          deletions += $3
      }
      END {
          print "Files Changed: " files
          print "Insertions: " insertions
          print "Deletions: " deletions
          print "Lines changed: " insertions + deletions
      }'
      ;;
  2)  echo "Your contributions to this repo in the last day..."
      git log --stat --author $(git config --get user.email) --since='yesterday' --until='now' | awk -F',' '/files? changed/ {
          files += $1
          insertions += $2
          deletions += $3
      }
      END {
          print "Files Changed: " files
          print "Insertions: " insertions
          print "Deletions: " deletions
          print "Lines changed: " insertions + deletions
      }'
      ;;
  3)  echo "All team contributions to this repo..."
      git log --stat | awk -F',' '/files? changed/ {
          files += $1
          insertions += $2
          deletions += $3
      }
      END {
          print "Files Changed: " files
          print "Insertions: " insertions
          print "Deletions: " deletions
          print "Lines changed: " insertions + deletions
      }'
      ;;
  4)  echo "All team contributions to this repo in the last day..."
      git log --stat --since='yesterday' --until='now' | awk -F',' '/files? changed/ {
          files += $1
          insertions += $2
          deletions += $3
      }
      END {
          print "Files Changed: " files
          print "Insertions: " insertions
          print "Deletions: " deletions
          print "Lines changed: " insertions + deletions
      }'
      ;;
  *) echo "Fail"
     ;;
  esac

}

# displays commits that are on branch1 that do not exist on branch2
# git_branch_compare branch1 branch2
function git_branch_compare() {
  git log $1 ^$2 --no-merges
}

function git_show_all_stashes() {
  git stash list | awk -F: '{ print "\n\n\n\n"; print $0; print "\n\n"; system("git -c color.ui=always stash show -p " $1); }' | less -R
}

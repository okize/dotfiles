%YAML1.2
---

# Licensed under the Apache License, Version 2.0 (the “License”); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

hidden: true
scope: ...

variables:
  commonIdentifier: |
    [$_[:alpha:]]
    [$_[:alnum:]]*

  genericArguments: |
    (<
      (?> {{string}}
        | \g<-1>
        | [^<>]
      )*
    >)

  parameters: |
    (\(
      (?> {{string}}
        | \g<-1>
        | [^()]
      )*
    \))

  flowOperators: |
    (?> &(?!\s*&)
      | \|(?!\s*\|)
    )

  string: |
    (?> '(?:\'|[^'])*?'
      | "(?:\"|[^"])*?"
      | `(?:\`|[^`])*?`
    )

  flowObject: |
    (\{
      (?> {{string}}
        | \g<-1>
        | [^{}]
      )*
    })

  simpleFlowType: |
    (?> {{string}}
      | {{flowObject}}
      | [$_[:alpha:]][$_[:alnum:].]*
    )
    (?:\s*{{genericArguments}})?
    (?:\s*\[\s*\])?

  flowFunction: |
    (
      {{parameters}}
      \s*=>\s*
      (?> (?:\?\s*){{simpleFlowType}}
        | \g<-1>
      )
    )

  complexType: |
    (?:\?\s*)?
    (
      (?> {{simpleFlowType}}
        | {{flowFunction}}
        | \g<-1>
      )
    )

  multipleTypes: |
    (
      (?> \s*{{flowOperators}}
        | \s*{{complexType}}
        | \g<-1>
      )+
    )

  flowComment: /\*\s*:.*?\*/

  type: |
    (?> {{flowComment}}
      | \:\s*{{multipleTypes}}
    )

  normalArrowFunction: |
    (?:async\b\s*)?
    (?:{{genericArguments}}\s*)?
    {{parameters}}
    (?:\s*{{type}})?
    \s*=>

  singleParameterArrowFunction: |
    (?:async\b\s+)?
    {{commonIdentifier}}
    (?:\s*{{type}})?
    \s*=>

  anyArrowFunction: |
    (?> {{normalArrowFunction}}
      | {{singleParameterArrowFunction}}
    )

  normalArrowFunctionAssignedToVariable: |
    {{commonIdentifier}}
    (?:\s*{{type}})?
    \s*=\s*
    {{normalArrowFunction}}

  singleParameterArrowFunctionAssignedToVariable: |
    {{commonIdentifier}}
    (?:\s*{{type}})?
    \s*=\s*
    {{singleParameterArrowFunction}}

  anyArrowFunctionAssignedToVariable: |
    {{commonIdentifier}}
    (?:\s*{{type}})?
    \s*=\s*
    (?> {{normalArrowFunction}}
      | {{singleParameterArrowFunction}}
    )

contexts:
  main:
    - include: object
    - include: simple

  arrow-body:
    - include: Packages/Naomi/syntaxes/fjsx15/arrow-function/body.sublime-syntax

  assignment:
    - match: =
      scope: keyword.operator.assignment.js.fjsx15
      pop: true

  comment-no-pop:
    - include: Packages/Naomi/syntaxes/fjsx15/comment.no-pop.sublime-syntax

  function-assigned-to-variable:
    # Normal arrow function assigned to variable.
    - match: |
        (?x)
        (?={{normalArrowFunctionAssignedToVariable}})
      set: [
        normal-arrow-function,
        assignment,
        optional-type,
        function-identifier
      ]
    # Single parameter arrow function assigned to variable.
    - match: |
        (?x)
        (?={{singleParameterArrowFunctionAssignedToVariable}})
      set: [
        single-parameter-arrow-function,
        assignment,
        optional-type,
        function-identifier
      ]
    # Function assigned to variable.
    - match: |
        (?x)
        (?=
          {{commonIdentifier}}
          (?:\s*{{type}})?
          \s*=\s*
          (?:async\b\s+)?
          function\s
        )
      set: [
        function,
        assignment,
        optional-type,
        function-identifier
      ]

  function:
    - meta_scope: >-
        meta.declaration.function.js.fjsx15
        meta.function.js.fjsx15
    - include: Packages/Naomi/syntaxes/fjsx15/function.sublime-syntax

  function-identifier:
    - match: (?xi){{commonIdentifier}}
      scope: entity.name.function.js.fjsx15
      pop: true

  normal-arrow-function:
    - meta_scope: meta.declaration.function.arrow.js.fjsx15
    - include: Packages/Naomi/syntaxes/fjsx15/async.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/flow1/generic/arguments.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameters.no-pop.sublime-syntax
    - match: (?==>)
      set: arrow-body

  single-parameter-arrow-function:
    - meta_scope: meta.declaration.function.arrow.js.fjsx15
    - include: Packages/Naomi/syntaxes/fjsx15/async.no-pop.sublime-syntax
    - include: Packages/Naomi/syntaxes/fjsx15/function/parameter/simple.no-pop.sublime-syntax
    - match: (?==>)
      set: arrow-body

  optional-type:
    - include: comment-no-pop
    - include: Packages/Naomi/syntaxes/flow1/optional-associated-type.sublime-syntax

  object:
    - match: |
        (?xi)
        (\#)?
        ({{commonIdentifier}})
        (?=\s*\??\.)
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.object.js.fjsx15
      pop: true

  simple:
    # Single character.
    - match: |
        (?xi)
        (\#)?
        ((?> \$\B
          | [_[:alpha:]]\b
        ))
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.readwrite.js.fjsx15
      pop: true
    # Two or more characters.
    - match: |
        (?xi)
        (\#)?
        (
          {{commonIdentifier}}
          (?> \$\B
            | [_[:alnum:]]\b
          )
        )
      captures:
        1: storage.modifier.js.fjsx15
        2: variable.other.readwrite.js.fjsx15
      pop: true

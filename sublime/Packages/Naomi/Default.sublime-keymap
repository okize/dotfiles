// Licensed under the Apache License, Version 2.0 (the “License”); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an “AS IS” BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

[{
  // () have the same behavior as {}.
  "keys": [ "enter" ],
  "command": "run_macro_file",
  "args": { "file": "res://Packages/Default/Add Line in Braces.sublime-macro" },
  "context": [{
    "key": "setting.auto_indent",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "\\($",
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^\\)",
    "match_all": true
  }]
},{
  // [] have the same behavior as {}.
  "keys": [ "enter" ],
  "command": "run_macro_file",
  "args": { "file": "res://Packages/Default/Add Line in Braces.sublime-macro" },
  "context": [{
    "key": "setting.auto_indent",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "\\[$",
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^\\]",
    "match_all": true
  }]
},{
  // '' have the same behavior as {}.
  "keys": [ "enter" ],
  "command": "run_macro_file",
  "args": { "file": "res://Packages/Default/Add Line in Braces.sublime-macro" },
  "context": [{
    "key": "setting.auto_indent",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "'$",
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^'",
    "match_all": true
  }]
},{
  // "" have the same behavior as {}.
  "keys": [ "enter" ],
  "command": "run_macro_file",
  "args": { "file": "res://Packages/Default/Add Line in Braces.sublime-macro" },
  "context": [{
    "key": "setting.auto_indent",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "\"$",
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^\"",
    "match_all": true
  }]
},{
  // `` have the same behavior as {}.
  "keys": [ "enter" ],
  "command": "run_macro_file",
  "args": { "file": "res://Packages/Default/Add Line in Braces.sublime-macro" },
  "context": [{
    "key": "setting.auto_indent",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "`$",
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^`",
    "match_all": true
  }]
},{
  // JS - Pair template.
  "keys": [ "`" ],
  "command": "insert_snippet",
  "args": { "contents": "`$0`" },
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.js - (string, comment)",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^(?>\\s|\\)|]|\\}|>|$)",
    "match_all": true
  },{
    "key": "setting.auto_match_enabled",
    "operator": "equal",
    "operand": true
  }]
},{
  // JS - Pair template for selected text.
  "keys": [ "`" ],
  "command": "insert_snippet",
  "args": { "contents": "`${0:$SELECTION}`" },
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.js",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": false,
    "match_all": true
  },{
    "key": "setting.auto_match_enabled",
    "operator": "equal",
    "operand": true
  }]
},{
  // Delete empty “`”.
  "keys": [ "backspace" ],
  "command": "run_macro_file",
  "args": {
    "file": "res://Packages/Default/Delete Left Right.sublime-macro"
  },
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "string.template.js",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "`$",
    "match_all": true
  },{
    "key": "following_text",
    "operator": "regex_contains",
    "operand": "^`",
    "match_all": true
  },{
    "key": "setting.auto_match_enabled",
    "operator": "equal",
    "operand": true
  }]
},{
  // JS - Pair interpolation
  "keys": [ "{" ],
  "command": "insert_snippet",
  "args": { "contents": "{$0}" },
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "string.template.js - (comment)",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_contains",
    "operand": "\\$$",
    "match_all": true
  },{
    "key": "setting.auto_match_enabled",
    "operator": "equal",
    "operand": true
  }]
},{
  // Adds “className=""” when “.” is pressed.
  "keys": [ "." ],
  "args": { "attribute": "className" },
  "command": "emmet_insert_attribute",
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.jsx meta.tag - (comment, string, meta.embedded-js)",
    "match_all": true
  },{
    "operator": "equal",
    "operand": true,
    "key": "setting.auto_id_class",
    "match_all": true
  }]
},{
  // Adds “id=""” when “#” is pressed.
  "keys": [ "#" ],
  "args": { "attribute": "id" },
  "command": "emmet_insert_attribute",
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.jsx meta.tag - (comment, string, meta.embedded-js)",
    "match_all": true
  },{
    "key": "setting.auto_id_class",
    "operator": "equal",
    "operand": true,
    "match_all": true
  }]
},{
  // Auto complete tags using tab and emmet.
  "keys": [ "tab" ],
  "command": "expand_abbreviation_by_tab",
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.jsx - (comment, string)",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "auto_complete_visible",
    "operator": "equal",
    "operand": false,
    "match_all": true
  },{
    "key": "is_abbreviation",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "setting.disable_tab_abbreviations",
    "operator": "equal",
    "operand": false,
    "match_all": true
  }]
},{
  // Close HTML, JSX and XML tags.
  "keys": [ "/" ],
  "command": "close_tag",
  "args": { "insert_slash": true },
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "(text.html, text.xml, source.jsx) - (string, comment)",
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "regex_match",
    "operand": "<\\s*$",
    "match_all": true
  },{
    "key": "setting.auto_close_tags",
    "operator": "equal",
    "operand": true
  }]
},{
  // Close JSX tag on “>”.
  "keys": [ ">" ],
  "command": "naomi_close_jsx_tag",
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.jsx meta.tag - (string, comment)",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "not_regex_contains",
    "operand": "/\\s*$",
    "match_all": true
  },{
    "key": "setting.auto_close_tags",
    "operator": "equal",
    "operand": true,
    "match_all": true
  }]
},{
  // Close self closing JSX tag on “/”.
  "keys": [ "/" ],
  "command": "insert_snippet",
  "args": { "contents": "/>" },
  "context": [{
    "key": "selector",
    "operator": "equal",
    "operand": "source.jsx meta.tag - (string, comment)",
    "match_all": true
  },{
    "key": "selection_empty",
    "operator": "equal",
    "operand": true,
    "match_all": true
  },{
    "key": "preceding_text",
    "operator": "not_regex_contains",
    "operand": "<\\s*$",
    "match_all": true
  },{
    "key": "setting.auto_close_tags",
    "operator": "equal",
    "operand": true,
    "match_all": true
  }]
}]
